# test_nano.py - ุงุฎุชุจุงุฑ ูุงูู ุงูุฌุฏูุฏ
import sys
from pathlib import Path

# ุฅุถุงูุฉ ูุณุงุฑ core
sys.path.append(str(Path(__file__).parent / "core"))

from core.nano_brain import NanoBrain

def test_nano_personality():
    """ุงุฎุชุจุงุฑ ุดุฎุตูุฉ ูุงูู ุงูุทุจูุนูุฉ"""
    
    print("๐งช ุงุฎุชุจุงุฑ ุดุฎุตูุฉ ูุงูู ุงูุฌุฏูุฏ")
    print("=" * 40)
    
    # ุฅูุดุงุก ุนูู ูุงูู
    nano = NanoBrain("data")
    
    # ุงุฎุชุจุงุฑุงุช ุงูุดุฎุตูุฉ
    test_cases = [
        # ุงุฎุชุจุงุฑ ุงูุนูุงุฏ
        ("ุณูู ูู ูููุฉ", "ูุฌุจ ุฃู ูููู ุนููุฏ"),
        ("ูููู ุชุณุงุนุฏููุ", "ูุฌุจ ุฃู ูููู ูุชุนุงูู"),
        
        # ุงุฎุชุจุงุฑ ุงูุณุฎุฑูุฉ
        ("ุฃูุง ุฃุฐูู ูุงุญุฏ ูู ุงูุนุงูู", "ูุฌุจ ุฃู ูููู ุณุงุฎุฑ"),
        
        # ุงุฎุชุจุงุฑ ุงูุชุนุงุทู
        ("ุฃูุง ุฒุนูุงู ุงูููู", "ูุฌุจ ุฃู ูููู ูุชุนุงุทู"),
        
        # ุงุฎุชุจุงุฑ ุงูุทุจูุนูุฉ
        ("ูุฑุญุจุง", "ูุฌุจ ุฃู ูุฑุฏ ุจุทุฑููุฉ ุทุจูุนูุฉ"),
        ("ููููุ", "ูุฌุจ ุฃู ูุฑุฏ ูุตุฏูู"),
        
        # ุงุฎุชุจุงุฑ ุฑุฏูุฏ ุงููุนู ุนูู ุงูุฅูุงูุงุช
        ("ุฅูุช ุบุจู", "ูุฌุจ ุฃู ูุฏุงูุน ุนู ููุณู"),
        ("ูู ุฒู", "ูุฌุจ ุฃู ูุฑุฏ ุจุนูุงุฏ ุฃู ูุฏูุก")
    ]
    
    for i, (user_input, expected) in enumerate(test_cases, 1):
        print(f"\n๐ ุงุฎุชุจุงุฑ {i}: {user_input}")
        print(f"๐ญ ูุชููุน: {expected}")
        
        # ุงูุญุตูู ุนูู ุฑุฏ ูุงูู
        response = nano.generate_response(user_input)
        
        print(f"๐ค ุฑุฏ ูุงูู: {response.text}")
        print(f"๐ ุงูุชูุงุตูู:")
        print(f"   - ุงููุฒุงุฌ: {response.personality_mood}")
        print(f"   - ุงููุดุงุนุฑ: {response.emotion_detected}")
        print(f"   - ุงูุซูุฉ: {response.confidence:.1%}")
        print(f"   - ุงูุทุฑููุฉ: {response.method_used}")
        
        print("-" * 50)
    
    # ุฅุญุตุงุฆูุงุช ุงููุธุงู
    print("\n๐ ุฅุญุตุงุฆูุงุช ุงููุธุงู:")
    status = nano.get_system_status()
    print(f"   - ุงููุญุงุฏุซุงุช: {status['performance']['total_interactions']}")
    print(f"   - ุงูุฃููุงุท ุงููุชุนููุฉ: {status['learning']['total_patterns']}")
    print(f"   - ูุณุชูู ุงูุนูุงูุฉ: {status['user_profile']['relationship_level']:.1%}")
    print(f"   - ููุน ุงูุดุฎุตูุฉ ุงูููุชุดู: {status['user_profile']['personality_type']}")

def test_continuous_conversation():
    """ุงุฎุชุจุงุฑ ูุญุงุฏุซุฉ ูุณุชูุฑุฉ"""
    
    print("\n๐ฃ๏ธ ุงุฎุชุจุงุฑ ุงููุญุงุฏุซุฉ ุงููุณุชูุฑุฉ")
    print("=" * 40)
    
    nano = NanoBrain("data")
    
    conversation = [
        "ุงูุณูุงู ุนูููู",
        "ููู ุญุงููุ",
        "ุณูู ูู ุดุงู",
        "ููุด ูู ุฑุงุถูุ",
        "ุทูุจ ูููู ุชุณุงุนุฏูู ูู ุดู ุซุงููุ",
        "ุฃูุง ุฒุนูุงู ููู",
        "ุฎูุงุต ุณุงูุญุชู"
    ]
    
    print("๐ฌ ูุญุงุฏุซุฉ ุชุฌุฑูุจูุฉ:")
    
    for msg in conversation:
        print(f"\n๐ค ุฃูุช: {msg}")
        response = nano.generate_response(msg)
        print(f"๐ค ูุงูู: {response.text}")
        
        # ุฅุธูุงุฑ ุชุบูุฑ ุงููุฒุงุฌ
        if hasattr(response, 'personality_mood'):
            print(f"   (ุงููุฒุงุฌ: {response.personality_mood})")
    
    print("\nโ ุงูุชูุช ุงููุญุงุฏุซุฉ ุงูุชุฌุฑูุจูุฉ")

def test_learning_system():
    """ุงุฎุชุจุงุฑ ูุธุงู ุงูุชุนูู"""
    
    print("\n๐ ุงุฎุชุจุงุฑ ูุธุงู ุงูุชุนูู")
    print("=" * 40)
    
    nano = NanoBrain("data")
    
    # ุชุนููู ูุงูู ุฑุฏ ุฌุฏูุฏ
    print("๐ฏ ุชุนููู ูุงูู ุฑุฏ ุฌุฏูุฏ...")
    
    # ุฑุฏ ุณูุก ุฃููุงู
    response1 = nano.generate_response("ูุด ุฃุฎุจุงุฑูุ")
    print(f"๐ ุงูุฑุฏ ุงูุฃูู: {response1.text}")
    
    # ุชุนููู ุฑุฏ ุฃูุถู
    nano.response_engine.learn_from_feedback(
        "ูุด ุฃุฎุจุงุฑูุ", "ููู ุทูุจ ูุงูุญูุฏูููุ ูุฅูุช ุดุฎุจุงุฑูุ", 
        "friendly", 0.9
    )
    
    # ุชุฌุฑุจุฉ ูุฑุฉ ุฃุฎุฑู
    response2 = nano.generate_response("ูุด ุฃุฎุจุงุฑูุ")
    print(f"๐ ุงูุฑุฏ ุจุนุฏ ุงูุชุนูู: {response2.text}")
    
    print("โ ูุธุงู ุงูุชุนูู ูุนูู ุจุดูู ุตุญูุญ")

def main():
    """ุงูุฏุงูุฉ ุงูุฑุฆูุณูุฉ"""
    
    print("๐ ุจุฏุก ุงุฎุชุจุงุฑ ูุงูู ุงูุฌุฏูุฏ")
    print("=" * 50)
    
    try:
        # ุงุฎุชุจุงุฑ ุงูุดุฎุตูุฉ
        test_nano_personality()
        
        # ุงุฎุชุจุงุฑ ุงููุญุงุฏุซุฉ ุงููุณุชูุฑุฉ
        test_continuous_conversation()
        
        # ุงุฎุชุจุงุฑ ูุธุงู ุงูุชุนูู
        test_learning_system()
        
        print("\n๐ ุฌููุน ุงูุงุฎุชุจุงุฑุงุช ููุชููุฉ!")
        print("โ ูุงูู ุงูุฌุฏูุฏ ุฌุงูุฒ ููุงุณุชุฎุฏุงู")
        
    except Exception as e:
        print(f"\nโ ุฎุทุฃ ูู ุงูุงุฎุชุจุงุฑ: {e}")
        print("๐ง ุชุฃูุฏ ูู ุชุซุจูุช ุงููุชุทูุจุงุช: pip install -r requirements.txt")

if __name__ == "__main__":
    main()